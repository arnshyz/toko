generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String
  slug         String   @unique
  isAdmin      Boolean  @default(false)
  isBanned     Boolean  @default(false)
  sellerOnboardingStatus SellerOnboardingStatus @default(ACTIVE)
  createdAt    DateTime @default(now())
  avatarUrl    String?
  username     String?  @unique
  phoneNumber  String?
  gender       Gender?
  storeBadge   StoreBadge @default(BASIC)
  storeIsOnline Boolean   @default(true)
  storeFollowers Int      @default(0)
  storeFollowing Int      @default(0)
  storeRating    Float?
  storeRatingCount Int    @default(0)
  storeAddressLine String?
  storeProvince    String?
  storeCity        String?
  storeDistrict    String?
  storePostalCode  String?
  storeOriginCityId String?

  products     Product[]
  orderItems   OrderItem[] @relation("SellerItems")
  orders       Order[]     @relation("BuyerOrders")
  orderReviews OrderReview[]
  reviewHelpfulVotes OrderReviewHelpful[]
  warehouses   Warehouse[]
  flashSales   FlashSale[]
  passwordResetTokens PasswordResetToken[]
  addresses    UserAddress[]
}

enum SellerOnboardingStatus {
  NOT_STARTED
  IN_PROGRESS
  ACTIVE
}

model Warehouse {
  id        String   @id @default(cuid())
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id])
  name      String
  city      String?
  createdAt DateTime @default(now())

  products  Product[]
}

model Product {
  id           String     @id @default(cuid())
  sellerId     String
  seller       User       @relation(fields: [sellerId], references: [id])
  title        String
  description  String?
  price        Int
  originalPrice Int?
  variantOptions Json?
  category     String     @default("umum")
  stock        Int        @default(0)
  imageUrl     String?
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  warehouseId  String?
  warehouse    Warehouse? @relation(fields: [warehouseId], references: [id])

  orderItems   OrderItem[]
  images       ProductImage[]
  flashSales   FlashSale[]
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model FlashSale {
  id              String   @id @default(cuid())
  sellerId        String
  seller          User     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  productId       String
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  discountPercent Int
  startAt         DateTime
  endAt           DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([sellerId])
  @@index([productId])
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  mimeType  String
  data      Bytes
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
}

model PromoBanner {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  highlight   String
  imageUrl    String
  ctaLabel    String
  ctaHref     String
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id               String        @id @default(cuid())
  orderCode        String        @unique
  buyerName        String
  buyerPhone       String
  buyerAddress     String
  buyerEmail       String?
  buyerId          String?
  buyer            User?         @relation("BuyerOrders", fields: [buyerId], references: [id])
  courier          String
  shippingCost     Int
  status           OrderStatus   @default(PENDING)
  paymentMethod    PaymentMethod @default(TRANSFER)
  uniqueCode       Int           @default(0)
  itemsTotal       Int
  totalWithUnique  Int
  voucherCode      String?
  voucherDiscount  Int           @default(0)
  proofImage       Bytes?
  proofMimeType    String?
  midtransTransactionId String?
  midtransOrderId       String?
  midtransStatus        String?
  midtransPaymentType   String?
  midtransFraudStatus   String?
  createdAt        DateTime      @default(now())

  items            OrderItem[]
  logs             VerificationLog[]
  returns          ReturnRequest[]
  review           OrderReview?
}

model UserAddress {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName      String
  phoneNumber   String
  province      String
  city          String
  district      String
  postalCode    String
  addressLine   String
  additionalInfo String?
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

model OrderReview {
  id        String   @id @default(cuid())
  orderId   String   @unique
  order     Order    @relation(fields: [orderId], references: [id])
  buyerId   String
  buyer     User     @relation(fields: [buyerId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  helpfulVotes OrderReviewHelpful[]
}

model OrderReviewHelpful {
  id        String   @id @default(cuid())
  reviewId  String
  review    OrderReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([reviewId, userId])
}

model OrderItem {
  id         String     @id @default(cuid())
  orderId    String
  order      Order      @relation(fields: [orderId], references: [id])
  productId  String
  product    Product    @relation(fields: [productId], references: [id])
  sellerId   String
  seller     User       @relation("SellerItems", fields: [sellerId], references: [id])
  qty        Int
  price      Int
  status     ItemStatus @default(PENDING)

  returns    ReturnRequest[]
}

model Voucher {
  id        String    @id @default(cuid())
  code      String    @unique
  kind      VoucherKind
  value     Int       // percent atau fixed IDR
  minSpend  Int       @default(0)
  active    Boolean   @default(true)
  expiresAt DateTime?
  createdAt DateTime  @default(now())
}

model ReturnRequest {
  id          String       @id @default(cuid())
  orderId     String
  order       Order        @relation(fields: [orderId], references: [id])
  orderItemId String
  orderItem   OrderItem    @relation(fields: [orderItemId], references: [id])
  status      ReturnStatus @default(REQUESTED)
  reason      String
  createdAt   DateTime     @default(now())
}

model VerificationLog {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  actor     String
  action    String
  note      String?
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  tokenHash String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())
}

model ChatThread {
  id        String   @id @default(cuid())
  orderId   String   @unique
  createdAt DateTime @default(now())
  messages  ChatMessage[]
}

model ChatMessage {
  id        String   @id @default(cuid())
  threadId  String
  thread    ChatThread @relation(fields: [threadId], references: [id])
  sender    String    // "buyer:<phone>" / "seller:<userId>"
  content   String?
  metadata  Json?
  createdAt DateTime  @default(now())
}



enum AttachmentScanStatus {
  PENDING
  CLEAN
  INFECTED
  FAILED
}

enum MessageDeliveryStatus {
  SENT
  DELIVERED
  READ
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}

enum ItemStatus {
  PENDING
  PACKED
  SHIPPED
  DELIVERED
}

enum PaymentMethod {
  TRANSFER
  COD
}

enum VoucherKind {
  PERCENT
  FIXED
}

enum ReturnStatus {
  REQUESTED
  APPROVED
  REJECTED
  RECEIVED
  REFUND_ISSUED
}

enum StoreBadge {
  BASIC
  STAR
  STAR_PLUS
  MALL
  PREMIUM
}
