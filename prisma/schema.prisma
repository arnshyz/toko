generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String
  slug         String   @unique
  isAdmin      Boolean  @default(false)
  createdAt    DateTime @default(now())
  storeBadge   StoreBadge @default(BASIC)
  storeIsOnline Boolean   @default(true)
  storeFollowers Int      @default(0)
  storeFollowing Int      @default(0)
  storeRating    Float?
  storeRatingCount Int    @default(0)

  products     Product[]
  orderItems   OrderItem[] @relation("SellerItems")
  warehouses   Warehouse[]
  passwordResetTokens PasswordResetToken[]
  chatThreadsCreated ChatThread[] @relation("CreatorThreads")
  chatParticipants   ChatParticipant[]
  chatMessages       ChatMessage[]
  chatReports        ChatReport[]
  chatBlocksIssued   ChatBlock[] @relation("IssuerBlocks")
  chatBlocksReceived ChatBlock[] @relation("TargetBlocks")
  chatAuditLogs      ChatAuditLog[]
}

model Warehouse {
  id        String   @id @default(cuid())
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id])
  name      String
  city      String?
  createdAt DateTime @default(now())

  products  Product[]
}

model Product {
  id           String     @id @default(cuid())
  sellerId     String
  seller       User       @relation(fields: [sellerId], references: [id])
  title        String
  description  String?
  price        Int
  originalPrice Int?
  variantOptions Json?
  category     String     @default("umum")
  stock        Int        @default(0)
  imageUrl     String?
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  warehouseId  String?
  warehouse    Warehouse? @relation(fields: [warehouseId], references: [id])

  orderItems   OrderItem[]
}

model Order {
  id               String        @id @default(cuid())
  orderCode        String        @unique
  buyerName        String
  buyerPhone       String
  buyerAddress     String
  courier          String
  shippingCost     Int
  status           OrderStatus   @default(PENDING)
  paymentMethod    PaymentMethod @default(TRANSFER)
  uniqueCode       Int           @default(0)
  itemsTotal       Int
  totalWithUnique  Int
  voucherCode      String?
  voucherDiscount  Int           @default(0)
  proofImage       Bytes?
  proofMimeType    String?
  createdAt        DateTime      @default(now())

  items            OrderItem[]
  logs             VerificationLog[]
  returns          ReturnRequest[]
}

model OrderItem {
  id         String     @id @default(cuid())
  orderId    String
  order      Order      @relation(fields: [orderId], references: [id])
  productId  String
  product    Product    @relation(fields: [productId], references: [id])
  sellerId   String
  seller     User       @relation("SellerItems", fields: [sellerId], references: [id])
  qty        Int
  price      Int
  status     ItemStatus @default(PENDING)

  returns    ReturnRequest[]
}

model Voucher {
  id        String    @id @default(cuid())
  code      String    @unique
  kind      VoucherKind
  value     Int       // percent atau fixed IDR
  minSpend  Int       @default(0)
  active    Boolean   @default(true)
  expiresAt DateTime?
  createdAt DateTime  @default(now())
}

model ReturnRequest {
  id          String       @id @default(cuid())
  orderId     String
  order       Order        @relation(fields: [orderId], references: [id])
  orderItemId String
  orderItem   OrderItem    @relation(fields: [orderItemId], references: [id])
  status      ReturnStatus @default(REQUESTED)
  reason      String
  createdAt   DateTime     @default(now())
}

model VerificationLog {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  actor     String
  action    String
  note      String?
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  otpHash   String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())
}

model ChatThread {
  id            String          @id @default(cuid())
  type          ChatThreadType  @default(DIRECT)
  contextType   ChatContextType
  contextId     String
  createdById   String
  createdBy     User            @relation("CreatorThreads", fields: [createdById], references: [id])
  title         String?
  lastMessageId String? @unique
  lastMessage   ChatMessage?    @relation("ThreadLastMessage", fields: [lastMessageId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  participants  ChatParticipant[]
  messages      ChatMessage[]
  reminders     ChatReminder[]
  reports       ChatReport[]
  auditLogs     ChatAuditLog[]

  @@index([contextType, contextId])
}

model ChatParticipant {
  id               String               @id @default(cuid())
  threadId         String
  thread           ChatThread           @relation(fields: [threadId], references: [id])
  userId           String
  user             User                 @relation(fields: [userId], references: [id])
  role             ChatParticipantRole  @default(MEMBER)
  lastReadMessageId String?
  lastReadAt       DateTime?
  mutedUntil       DateTime?
  isActive         Boolean              @default(true)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt

  receipts         ChatMessageReceipt[]

  @@unique([threadId, userId])
}

model ChatMessage {
  id           String          @id @default(cuid())
  threadId     String
  thread       ChatThread      @relation(fields: [threadId], references: [id])
  senderId     String
  sender       User            @relation(fields: [senderId], references: [id])
  content      String?
  kind         ChatMessageKind @default(TEXT)
  metadata     Json?
  sentAt       DateTime        @default(now())
  deliveredAt  DateTime?
  readAt       DateTime?
  editedAt     DateTime?
  deletedAt    DateTime?
  moderationState ChatModerationState @default(PENDING)

  attachments  ChatAttachment[]
  receipts     ChatMessageReceipt[]
  reports      ChatReport[]
  threadAsLastMessage ChatThread? @relation("ThreadLastMessage")

  @@index([threadId, sentAt])
}

model ChatAttachment {
  id          String   @id @default(cuid())
  messageId   String
  message     ChatMessage @relation(fields: [messageId], references: [id])
  url         String
  fileName    String
  mimeType    String
  size        Int
  scannedAt   DateTime?
  scanStatus  AttachmentScanStatus @default(PENDING)
  createdAt   DateTime @default(now())
}

model ChatMessageReceipt {
  id          String              @id @default(cuid())
  messageId   String
  message     ChatMessage         @relation(fields: [messageId], references: [id])
  participantId String
  participant ChatParticipant     @relation(fields: [participantId], references: [id])
  status      MessageDeliveryStatus
  occurredAt  DateTime            @default(now())

  @@unique([messageId, participantId, status])
}

model ChatReport {
  id          String        @id @default(cuid())
  messageId   String
  message     ChatMessage   @relation(fields: [messageId], references: [id])
  threadId    String
  thread      ChatThread    @relation(fields: [threadId], references: [id])
  reporterId  String
  reporter    User          @relation(fields: [reporterId], references: [id])
  reason      String
  createdAt   DateTime      @default(now())
  resolvedAt  DateTime?
  resolution  String?
}

model ChatBlock {
  id           String   @id @default(cuid())
  issuerId     String
  issuer       User     @relation("IssuerBlocks", fields: [issuerId], references: [id])
  targetId     String
  target       User     @relation("TargetBlocks", fields: [targetId], references: [id])
  reason       String?
  createdAt    DateTime @default(now())
  expiresAt    DateTime?

  @@unique([issuerId, targetId])
}

model ChatReminder {
  id           String    @id @default(cuid())
  threadId     String
  thread       ChatThread @relation(fields: [threadId], references: [id])
  triggeredFor DateTime
  createdAt    DateTime  @default(now())
  sent         Boolean   @default(false)

  @@unique([threadId, triggeredFor])
}

model ChatAuditLog {
  id        String          @id @default(cuid())
  threadId  String?
  thread    ChatThread?     @relation(fields: [threadId], references: [id])
  actorId   String?
  actor     User?           @relation(fields: [actorId], references: [id])
  action    ChatAuditAction
  detail    String?
  createdAt DateTime        @default(now())
}

enum ChatThreadType {
  DIRECT
  GROUP
}

enum ChatContextType {
  PRODUCT
  ORDER
  CART
  SUPPORT
}

enum ChatParticipantRole {
  MEMBER
  SELLER
  BUYER
  ADMIN
  SUPPORT
}

enum ChatMessageKind {
  TEXT
  ATTACHMENT
  SYSTEM
}

enum ChatModerationState {
  PENDING
  APPROVED
  FLAGGED
  BLOCKED
}

enum AttachmentScanStatus {
  PENDING
  CLEAN
  INFECTED
  FAILED
}

enum MessageDeliveryStatus {
  SENT
  DELIVERED
  READ
}

enum ChatAuditAction {
  THREAD_CREATED
  MESSAGE_SENT
  MESSAGE_FLAGGED
  MESSAGE_REPORTED
  USER_BLOCKED
  USER_UNBLOCKED
  PARTICIPANT_JOINED
  PARTICIPANT_LEFT
  REMINDER_SCHEDULED
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}

enum ItemStatus {
  PENDING
  PACKED
  SHIPPED
  DELIVERED
}

enum PaymentMethod {
  TRANSFER
  COD
}

enum VoucherKind {
  PERCENT
  FIXED
}

enum ReturnStatus {
  REQUESTED
  APPROVED
  REJECTED
  RECEIVED
  REFUND_ISSUED
}

enum StoreBadge {
  BASIC
  STAR
  STAR_PLUS
  MALL
  PREMIUM
}
